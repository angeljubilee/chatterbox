{"ast":null,"code":"export const addMessageToStore = (state, payload) => {\n  const {\n    message,\n    sender\n  } = payload; // if sender isn't null, that means the message needs to be put in a brand new convo\n\n  if (sender !== null) {\n    const newConvo = {\n      id: message.conversationId,\n      otherUser: sender,\n      messages: [message]\n    };\n    newConvo.latestMessageText = message.text;\n    return [newConvo, ...state];\n  }\n\n  return state.map(convo => {\n    if (convo.id === message.conversationId) {\n      const convoCopy = { ...convo\n      };\n      convoCopy.messages = [...convo.messages, message];\n      convoCopy.latestMessageText = message.text;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};\nexport const addOnlineUserToStore = (state, id) => {\n  return state.map(convo => {\n    if (convo.otherUser.id === id) {\n      const convoCopy = { ...convo\n      };\n      convoCopy.otherUser.online = true;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};\nexport const removeOfflineUserFromStore = (state, id) => {\n  return state.map(convo => {\n    if (convo.otherUser.id === id) {\n      const convoCopy = { ...convo\n      };\n      convoCopy.otherUser.online = false;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};\nexport const addSearchedUsersToStore = (state, users) => {\n  const currentUsers = {}; // make table of current users so we can lookup faster\n\n  state.forEach(convo => {\n    currentUsers[convo.otherUser.id] = true;\n  });\n  const newState = [...state];\n  users.forEach(user => {\n    // only create a fake convo if we don't already have a convo with this user\n    if (!currentUsers[user.id]) {\n      let fakeConvo = {\n        otherUser: user,\n        messages: []\n      };\n      newState.push(fakeConvo);\n    }\n  });\n  return newState;\n};\nexport const addNewConvoToStore = (state, recipientId, message) => {\n  return state.map(convo => {\n    if (convo.otherUser.id === recipientId) {\n      const convoCopy = { ...convo\n      }; //convoCopy.messages = [...convo.messages, message];\n\n      convoCopy.messages = [message];\n      convoCopy.id = message.conversationId;\n      convoCopy.latestMessageText = message.text;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};","map":{"version":3,"sources":["/home/angel/repos/messenger-3457/client/src/store/utils/reducerFunctions.js"],"names":["addMessageToStore","state","payload","message","sender","newConvo","id","conversationId","otherUser","messages","latestMessageText","text","map","convo","convoCopy","addOnlineUserToStore","online","removeOfflineUserFromStore","addSearchedUsersToStore","users","currentUsers","forEach","newState","user","fakeConvo","push","addNewConvoToStore","recipientId"],"mappings":"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","sourcesContent":["export const addMessageToStore = (state, payload) => {\n  const { message, sender } = payload;\n  // if sender isn't null, that means the message needs to be put in a brand new convo\n  if (sender !== null) {\n    const newConvo = {\n      id: message.conversationId,\n      otherUser: sender,\n      messages: [message],\n    };\n    newConvo.latestMessageText = message.text;\n    return [newConvo, ...state];\n  }\n\n  return state.map((convo) => {\n    if (convo.id === message.conversationId) {\n      const convoCopy = { ...convo };\n      convoCopy.messages = [...convo.messages, message];\n      convoCopy.latestMessageText = message.text;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};\n\nexport const addOnlineUserToStore = (state, id) => {\n  return state.map((convo) => {\n    if (convo.otherUser.id === id) {\n      const convoCopy = { ...convo };\n      convoCopy.otherUser.online = true;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};\n\nexport const removeOfflineUserFromStore = (state, id) => {\n  return state.map((convo) => {\n    if (convo.otherUser.id === id) {\n      const convoCopy = { ...convo };\n      convoCopy.otherUser.online = false;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};\n\nexport const addSearchedUsersToStore = (state, users) => {\n  const currentUsers = {};\n\n  // make table of current users so we can lookup faster\n  state.forEach((convo) => {\n    currentUsers[convo.otherUser.id] = true;\n  });\n\n  const newState = [...state];\n  users.forEach((user) => {\n    // only create a fake convo if we don't already have a convo with this user\n    if (!currentUsers[user.id]) {\n      let fakeConvo = { otherUser: user, messages: [] };\n      newState.push(fakeConvo);\n    }\n  });\n\n  return newState;\n};\n\nexport const addNewConvoToStore = (state, recipientId, message) => {\n  return state.map((convo) => {\n    if (convo.otherUser.id === recipientId) {\n      const convoCopy = { ...convo };\n      //convoCopy.messages = [...convo.messages, message];\n      convoCopy.messages = [message];\n      convoCopy.id = message.conversationId;\n      convoCopy.latestMessageText = message.text;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}