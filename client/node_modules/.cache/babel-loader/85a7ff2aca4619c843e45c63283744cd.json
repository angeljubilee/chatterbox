{"ast":null,"code":"import axios from \"axios\";\nimport socket from \"../../socket\";\nimport { gotConversations, addConversation, setNewMessage, setSearchedUsers } from \"../conversations\";\nimport { gotUser, setFetchingStatus } from \"../user\";\naxios.interceptors.request.use(async function (config) {\n  const token = await localStorage.getItem(\"messenger-token\");\n  config.headers[\"x-access-token\"] = token;\n  return config;\n}); // USER THUNK CREATORS\n\nexport const fetchUser = () => async dispatch => {\n  dispatch(setFetchingStatus(true));\n\n  try {\n    const {\n      data\n    } = await axios.get(\"/auth/user\");\n    dispatch(gotUser(data));\n\n    if (data.id) {\n      socket.emit(\"go-online\", data.id);\n    }\n  } catch (error) {\n    console.error(error);\n  } finally {\n    dispatch(setFetchingStatus(false));\n  }\n};\nexport const register = credentials => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.post(\"/auth/register\", credentials);\n    await localStorage.setItem(\"messenger-token\", data.token);\n    dispatch(gotUser(data));\n    socket.emit(\"go-online\", data.id);\n  } catch (error) {\n    console.error(error);\n    dispatch(gotUser({\n      error: error.response.data.error || \"Server Error\"\n    }));\n  }\n};\nexport const login = credentials => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.post(\"/auth/login\", credentials);\n    await localStorage.setItem(\"messenger-token\", data.token);\n    dispatch(gotUser(data));\n    socket.emit(\"go-online\", data.id);\n  } catch (error) {\n    console.error(error);\n    dispatch(gotUser({\n      error: error.response.data.error || \"Server Error\"\n    }));\n  }\n};\nexport const logout = id => async dispatch => {\n  try {\n    await axios.delete(\"/auth/logout\");\n    await localStorage.removeItem(\"messenger-token\");\n    dispatch(gotUser({}));\n    socket.emit(\"logout\", id);\n  } catch (error) {\n    console.error(error);\n  }\n}; // CONVERSATIONS THUNK CREATORS\n\nexport const fetchConversations = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.get(\"/api/conversations\");\n    dispatch(gotConversations(data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst saveMessage = async body => {\n  const {\n    data\n  } = await axios.post(\"/api/messages\", body);\n  return data;\n};\n\nconst sendMessage = (data, body) => {\n  console.log('Inside thunkCreator', data.message);\n  socket.emit(\"new-message\", {\n    message: data.message,\n    recipientId: body.recipientId,\n    sender: data.sender\n  });\n}; // message format to send: {recipientId, text, conversationId}\n// conversationId will be set to null if its a brand new conversation\n\n\nexport const postMessage = body => async dispatch => {\n  console.log('Inside thunkCreators, postMessage', body);\n\n  try {\n    const data = await saveMessage(body);\n    console.log('data', data);\n\n    if (!body.conversationId) {\n      console.log('Calling addConversation');\n      dispatch(addConversation(body.recipientId, data.message));\n    } else {\n      console.log('Calling setNewMessage)');\n      dispatch(setNewMessage(data.message));\n    }\n\n    sendMessage(data, body);\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const searchUsers = searchTerm => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.get(`/api/users/${searchTerm}`);\n    dispatch(setSearchedUsers(data));\n  } catch (error) {\n    console.error(error);\n  }\n};","map":{"version":3,"sources":["/home/angel/repos/messenger-3457/client/src/store/utils/thunkCreators.js"],"names":["axios","socket","gotConversations","addConversation","setNewMessage","setSearchedUsers","gotUser","setFetchingStatus","interceptors","request","use","config","token","localStorage","getItem","headers","fetchUser","dispatch","data","get","id","emit","error","console","register","credentials","post","setItem","response","login","logout","delete","removeItem","fetchConversations","saveMessage","body","sendMessage","log","message","recipientId","sender","postMessage","conversationId","searchUsers","searchTerm"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport socket from \"../../socket\";\nimport {\n  gotConversations,\n  addConversation,\n  setNewMessage,\n  setSearchedUsers,\n} from \"../conversations\";\nimport { gotUser, setFetchingStatus } from \"../user\";\n\naxios.interceptors.request.use(async function (config) {\n  const token = await localStorage.getItem(\"messenger-token\");\n  config.headers[\"x-access-token\"] = token;\n\n  return config;\n});\n\n// USER THUNK CREATORS\n\nexport const fetchUser = () => async (dispatch) => {\n  dispatch(setFetchingStatus(true));\n  try {\n    const { data } = await axios.get(\"/auth/user\");\n    dispatch(gotUser(data));\n    if (data.id) {\n      socket.emit(\"go-online\", data.id);\n    }\n  } catch (error) {\n    console.error(error);\n  } finally {\n    dispatch(setFetchingStatus(false));\n  }\n};\n\nexport const register = (credentials) => async (dispatch) => {\n  try {\n    const { data } = await axios.post(\"/auth/register\", credentials);\n    await localStorage.setItem(\"messenger-token\", data.token);\n    dispatch(gotUser(data));\n    socket.emit(\"go-online\", data.id);\n  } catch (error) {\n    console.error(error);\n    dispatch(gotUser({ error: error.response.data.error || \"Server Error\" }));\n  }\n};\n\nexport const login = (credentials) => async (dispatch) => {\n  try {\n    const { data } = await axios.post(\"/auth/login\", credentials);\n    await localStorage.setItem(\"messenger-token\", data.token);\n    dispatch(gotUser(data));\n    socket.emit(\"go-online\", data.id);\n  } catch (error) {\n    console.error(error);\n    dispatch(gotUser({ error: error.response.data.error || \"Server Error\" }));\n  }\n};\n\nexport const logout = (id) => async (dispatch) => {\n  try {\n    await axios.delete(\"/auth/logout\");\n    await localStorage.removeItem(\"messenger-token\");\n    dispatch(gotUser({}));\n    socket.emit(\"logout\", id);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// CONVERSATIONS THUNK CREATORS\n\nexport const fetchConversations = () => async (dispatch) => {\n  try {\n    const { data } = await axios.get(\"/api/conversations\");\n    dispatch(gotConversations(data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst saveMessage = async (body) => {\n  const { data } = await axios.post(\"/api/messages\", body);\n  return data;\n};\n\nconst sendMessage = (data, body) => {\n  console.log('Inside thunkCreator', data.message);\n  socket.emit(\"new-message\", {\n    message: data.message,\n    recipientId: body.recipientId,\n    sender: data.sender,\n  });\n};\n\n// message format to send: {recipientId, text, conversationId}\n// conversationId will be set to null if its a brand new conversation\nexport const postMessage = (body) => async (dispatch) => {\n  console.log('Inside thunkCreators, postMessage', body);\n  try {\n    const data = await saveMessage(body);\n\n    console.log('data', data);\n\n    if (!body.conversationId) {\n      console.log('Calling addConversation');\n      dispatch(addConversation(body.recipientId, data.message));\n    } else {\n      console.log('Calling setNewMessage)');\n      dispatch(setNewMessage(data.message));\n    }\n\n    sendMessage(data, body);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const searchUsers = (searchTerm) => async (dispatch) => {\n  try {\n    const { data } = await axios.get(`/api/users/${searchTerm}`);\n    dispatch(setSearchedUsers(data));\n  } catch (error) {\n    console.error(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}