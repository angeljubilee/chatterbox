{"ast":null,"code":"var _jsxFileName = \"/home/angel/repos/messenger-3457/client/src/components/ActiveChat/ActiveChat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box } from \"@material-ui/core\";\nimport { Input, Header, Messages } from \"./index\";\nimport { connect } from \"react-redux\";\nimport { markMessagesRead } from \"../../store/utils/thunkCreators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: \"flex\",\n    flexGrow: 8,\n    flexDirection: \"column\"\n  },\n  chatContainer: {\n    marginLeft: 41,\n    marginRight: 41,\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexGrow: 1,\n    justifyContent: \"space-between\"\n  }\n}));\n\nconst ActiveChat = props => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    markMessagesRead,\n    user\n  } = props;\n  const conversation = props.conversation || {};\n  useEffect(() => {\n    if (!conversation.messages) {\n      return;\n    }\n\n    const lastMessageIndex = conversation.messages.length - 1;\n\n    if (conversation.messages[lastMessageIndex].msgRead === false && conversation.messages[lastMessageIndex].senderId !== user.id) {\n      markMessagesRead(conversation.id);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.root,\n    children: conversation.otherUser && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        username: conversation.otherUser.username,\n        online: conversation.otherUser.online || false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.chatContainer,\n        children: [/*#__PURE__*/_jsxDEV(Messages, {\n          messages: conversation.messages,\n          otherUser: conversation.otherUser,\n          userId: user.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          otherUser: conversation.otherUser,\n          conversationId: conversation.id,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ActiveChat, \"OAQf9SHEQQsOOZKjohcuI3tGtQ0=\", false, function () {\n  return [useStyles];\n});\n\n_c = ActiveChat;\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    conversation: state.conversations && state.conversations.find(conversation => conversation.otherUser.username === state.activeConversation)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    markMessagesRead: msgIds => {\n      dispatch(markMessagesRead(msgIds));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveChat);\n\nvar _c;\n\n$RefreshReg$(_c, \"ActiveChat\");","map":{"version":3,"sources":["/home/angel/repos/messenger-3457/client/src/components/ActiveChat/ActiveChat.js"],"names":["React","useEffect","makeStyles","Box","Input","Header","Messages","connect","markMessagesRead","useStyles","root","display","flexGrow","flexDirection","chatContainer","marginLeft","marginRight","justifyContent","ActiveChat","props","classes","user","conversation","messages","lastMessageIndex","length","msgRead","senderId","id","otherUser","username","online","mapStateToProps","state","conversations","find","activeConversation","mapDispatchToProps","dispatch","msgIds"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box } from \"@material-ui/core\";\nimport { Input, Header, Messages } from \"./index\";\nimport { connect } from \"react-redux\";\nimport { markMessagesRead } from \"../../store/utils/thunkCreators\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: \"flex\",\n    flexGrow: 8,\n    flexDirection: \"column\"\n  },\n  chatContainer: {\n    marginLeft: 41,\n    marginRight: 41,\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexGrow: 1,\n    justifyContent: \"space-between\"\n  }\n}));\n\nconst ActiveChat = (props) => {\n  const classes = useStyles();\n  const { markMessagesRead, user } = props;\n  const conversation = props.conversation || {};\n\n  useEffect(() => {\n    if (!conversation.messages) {\n      return;\n    }\n    const lastMessageIndex = conversation.messages.length - 1;\n    if (conversation.messages[lastMessageIndex].msgRead === false &&\n        conversation.messages[lastMessageIndex].senderId !== user.id) {\n      markMessagesRead(conversation.id);\n    }\n  });\n\n  return (\n    <Box className={classes.root}>\n      {conversation.otherUser && (\n        <>\n          <Header\n            username={conversation.otherUser.username}\n            online={conversation.otherUser.online || false}\n          />\n          <Box className={classes.chatContainer}>\n            <Messages\n              messages={conversation.messages}\n              otherUser={conversation.otherUser}\n              userId={user.id}\n            />\n            <Input\n              otherUser={conversation.otherUser}\n              conversationId={conversation.id}\n              user={user}\n            />\n          </Box>\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    conversation:\n      state.conversations &&\n      state.conversations.find(\n        (conversation) => conversation.otherUser.username === state.activeConversation\n      )\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    markMessagesRead: (msgIds) => {\n      dispatch(markMessagesRead(msgIds));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveChat);\n"]},"metadata":{},"sourceType":"module"}