{"ast":null,"code":"var _jsxFileName = \"/home/angel/repos/messenger-3457/client/src/components/Sidebar/SidebarContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Sidebar } from \"./index\";\nimport { searchUsers } from \"../../store/utils/thunkCreators\";\nimport { clearSearchedUsers } from \"../../store/conversations\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SidebarContainer = props => {\n  _s();\n\n  const {\n    searchUsers,\n    clearSearchedUsers\n  } = props;\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleChange = async event => {\n    if (event.target.value === \"\") {\n      // clear searched convos from redux store\n      clearSearchedUsers();\n      setSearchTerm(\"\");\n      return;\n    }\n\n    if (searchTerm.includes(event.target.value)) {\n      // if new value is included in search term, we don't need to make another API call, just need to set the search term value so the conversations can be filtered in the rendering\n      setSearchTerm(event.target.value);\n      return;\n    }\n\n    await searchUsers(event.target.value);\n    setSearchTerm(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Sidebar, {\n    handleChange: handleChange,\n    searchTerm: searchTerm\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n};\n\n_s(SidebarContainer, \"+YdqPTpSlp4r5CWiFEQiF/UjThM=\");\n\n_c = SidebarContainer;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    searchUsers: username => {\n      dispatch(searchUsers(username));\n    },\n    clearSearchedUsers: () => {\n      dispatch(clearSearchedUsers());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SidebarContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"SidebarContainer\");","map":{"version":3,"sources":["/home/angel/repos/messenger-3457/client/src/components/Sidebar/SidebarContainer.js"],"names":["React","useState","connect","Sidebar","searchUsers","clearSearchedUsers","SidebarContainer","props","searchTerm","setSearchTerm","handleChange","event","target","value","includes","mapDispatchToProps","dispatch","username"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,kBAAT,QAAmC,2BAAnC;;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AAClC,QAAM;AAAEH,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAsCE,KAA5C;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMS,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC,QAAIA,KAAK,CAACC,MAAN,CAAaC,KAAb,KAAuB,EAA3B,EAA+B;AAC7B;AACAR,MAAAA,kBAAkB;AAClBI,MAAAA,aAAa,CAAC,EAAD,CAAb;AACA;AACD;;AACD,QAAID,UAAU,CAACM,QAAX,CAAoBH,KAAK,CAACC,MAAN,CAAaC,KAAjC,CAAJ,EAA6C;AAC3C;AACAJ,MAAAA,aAAa,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACA;AACD;;AACD,UAAMT,WAAW,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAjB;AACAJ,IAAAA,aAAa,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAdD;;AAgBA,sBAAO,QAAC,OAAD;AAAS,IAAA,YAAY,EAAEH,YAAvB;AAAqC,IAAA,UAAU,EAAEF;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAtBD;;GAAMF,gB;;KAAAA,gB;;AAwBN,MAAMS,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLZ,IAAAA,WAAW,EAAGa,QAAD,IAAc;AACzBD,MAAAA,QAAQ,CAACZ,WAAW,CAACa,QAAD,CAAZ,CAAR;AACD,KAHI;AAILZ,IAAAA,kBAAkB,EAAE,MAAM;AACxBW,MAAAA,QAAQ,CAACX,kBAAkB,EAAnB,CAAR;AACD;AANI,GAAP;AAQD,CATD;;AAWA,eAAeH,OAAO,CAAC,IAAD,EAAOa,kBAAP,CAAP,CAAkCT,gBAAlC,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Sidebar } from \"./index\";\nimport { searchUsers } from \"../../store/utils/thunkCreators\";\nimport { clearSearchedUsers } from \"../../store/conversations\";\n\nconst SidebarContainer = (props) => {\n  const { searchUsers, clearSearchedUsers } = props;\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleChange = async (event) => {\n    if (event.target.value === \"\") {\n      // clear searched convos from redux store\n      clearSearchedUsers();\n      setSearchTerm(\"\");\n      return;\n    }\n    if (searchTerm.includes(event.target.value)) {\n      // if new value is included in search term, we don't need to make another API call, just need to set the search term value so the conversations can be filtered in the rendering\n      setSearchTerm(event.target.value);\n      return;\n    }\n    await searchUsers(event.target.value);\n    setSearchTerm(event.target.value);\n  };\n\n  return <Sidebar handleChange={handleChange} searchTerm={searchTerm} />;\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    searchUsers: (username) => {\n      dispatch(searchUsers(username));\n    },\n    clearSearchedUsers: () => {\n      dispatch(clearSearchedUsers());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SidebarContainer);\n"]},"metadata":{},"sourceType":"module"}