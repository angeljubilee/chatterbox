{"ast":null,"code":"export const addMessageToStore = (state, payload) => {\n  const {\n    message,\n    sender\n  } = payload; // if sender isn't null, that means the message needs to be put in a brand new convo\n\n  if (sender !== null) {\n    const newConvo = {\n      id: message.conversationId,\n      otherUser: sender,\n      messages: [message]\n    };\n    newConvo.latestMessageText = message.text;\n    return [newConvo, ...state];\n  }\n\n  return state.map(convo => {\n    if (convo.id === message.conversationId) {\n      convo.messages.push(message);\n      convo.latestMessageText = message.text;\n      return convo;\n    } else {\n      return convo;\n    }\n  });\n};\nexport const addOnlineUserToStore = (state, id) => {\n  return state.map(convo => {\n    if (convo.otherUser.id === id) {\n      const convoCopy = { ...convo\n      };\n      convoCopy.otherUser.online = true;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};\nexport const removeOfflineUserFromStore = (state, id) => {\n  return state.map(convo => {\n    if (convo.otherUser.id === id) {\n      const convoCopy = { ...convo\n      };\n      convoCopy.otherUser.online = false;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};\nexport const addSearchedUsersToStore = (state, users) => {\n  const currentUsers = {}; // make table of current users so we can lookup faster\n\n  state.forEach(convo => {\n    currentUsers[convo.otherUser.id] = true;\n  });\n  const newState = [...state];\n  users.forEach(user => {\n    // only create a fake convo if we don't already have a convo with this user\n    if (!currentUsers[user.id]) {\n      let fakeConvo = {\n        otherUser: user,\n        messages: []\n      };\n      newState.push(fakeConvo);\n    }\n  });\n  return newState;\n};\nexport const addNewConvoToStore = (state, recipientId, message) => {\n  return state.map(convo => {\n    if (convo.otherUser.id === recipientId) {\n      convo.id = message.conversationId;\n      convo.messages.push(message);\n      convo.latestMessageText = message.text;\n      return convo;\n    } else {\n      return convo;\n    }\n  });\n};","map":{"version":3,"sources":["/home/angel/repos/messenger-3457/client/src/store/utils/reducerFunctions.js"],"names":["addMessageToStore","state","payload","message","sender","newConvo","id","conversationId","otherUser","messages","latestMessageText","text","map","convo","push","addOnlineUserToStore","convoCopy","online","removeOfflineUserFromStore","addSearchedUsersToStore","users","currentUsers","forEach","newState","user","fakeConvo","addNewConvoToStore","recipientId"],"mappings":"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","sourcesContent":["export const addMessageToStore = (state, payload) => {\n  const { message, sender } = payload;\n  // if sender isn't null, that means the message needs to be put in a brand new convo\n  if (sender !== null) {\n    const newConvo = {\n      id: message.conversationId,\n      otherUser: sender,\n      messages: [message],\n    };\n    newConvo.latestMessageText = message.text;\n    return [newConvo, ...state];\n  }\n\n  return state.map((convo) => {\n    if (convo.id === message.conversationId) {\n      convo.messages.push(message);\n      convo.latestMessageText = message.text;\n      return convo;\n    } else {\n      return convo;\n    }\n  });\n};\n\nexport const addOnlineUserToStore = (state, id) => {\n  return state.map((convo) => {\n    if (convo.otherUser.id === id) {\n      const convoCopy = { ...convo };\n      convoCopy.otherUser.online = true;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};\n\nexport const removeOfflineUserFromStore = (state, id) => {\n  return state.map((convo) => {\n    if (convo.otherUser.id === id) {\n      const convoCopy = { ...convo };\n      convoCopy.otherUser.online = false;\n      return convoCopy;\n    } else {\n      return convo;\n    }\n  });\n};\n\nexport const addSearchedUsersToStore = (state, users) => {\n  const currentUsers = {};\n\n  // make table of current users so we can lookup faster\n  state.forEach((convo) => {\n    currentUsers[convo.otherUser.id] = true;\n  });\n\n  const newState = [...state];\n  users.forEach((user) => {\n    // only create a fake convo if we don't already have a convo with this user\n    if (!currentUsers[user.id]) {\n      let fakeConvo = { otherUser: user, messages: [] };\n      newState.push(fakeConvo);\n    }\n  });\n\n  return newState;\n};\n\nexport const addNewConvoToStore = (state, recipientId, message) => {\n  return state.map((convo) => {\n    if (convo.otherUser.id === recipientId) {\n      convo.id = message.conversationId;\n      convo.messages.push(message);\n      convo.latestMessageText = message.text;\n      return convo;\n    } else {\n      return convo;\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}